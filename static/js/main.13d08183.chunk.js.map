{"version":3,"sources":["js/reducers/index.js","js/constants/action-types.js","js/store/index.js","js/components/List.js","js/components/Form.js","js/actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","articles","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","toConsumableArray","concat","payload","store","createStore","List","connect","_ref","react_default","a","createElement","className","map","el","key","id","title","ConnectedForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","value","preventDefault","uuidv1","props","addArticle","onSubmit","htmlFor","onChange","Component","Form","dispatch","article","App","components_List","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13d08183.chunk.js","sourcesContent":["import { ADD_ARTICLE } from '../constants/action-types'\n\nconst initialState = {\n  articles: []\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ARTICLE:\n      return {\n        ...state,\n        articles: [\n          ...state.articles,\n          action.payload\n        ]\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","export const ADD_ARTICLE = \"ADD_ARTICLE\";","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return { \n    articles: state.articles\n  };\n};\n\nconst ConnectedList = ({ articles }) => (\n  <ul className=\"list-group list-group-flush\">\n    {articles.map(el => (\n      <li className=\"list-group-item\" key={el.id}>\n        {el.title}\n      </li>\n    ))}\n  </ul>\n);\n\nconst List = connect(mapStateToProps)(ConnectedList);\n\nexport default List;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport uuidv1 from \"uuid\";\nimport { addArticle } from \"../actions/index\";\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addArticle: article => dispatch(addArticle(article))\n  };\n};\n\nclass ConnectedForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { title } = this.state;\n    const id = uuidv1();\n    this.props.addArticle({ title, id });\n    this.setState({\n      title: \"\"\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Title</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"title\"\n            value={title}\n            onChange={this.handleChange}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-success btn-lg\">\n          SAVE\n        </button>\n      </form>\n    );\n  }\n}\n\nconst Form = connect(null, mapDispatchToProps)(ConnectedForm);\n\nexport default Form;","import { ADD_ARTICLE } from \"../constants/action-types\";\n\nexport const addArticle = article => ({ \n  type: ADD_ARTICLE,\n  payload: article\n});","import React from \"react\";\nimport List from \"./js/components/List\";\nimport Form from \"./js/components/Form\";\n\nconst App = () => (\n  <div className=\"row mt-5\">\n    <div className=\"col-md-4 offset-md-1\">\n      <h2>Articles</h2>\n      <List />\n    </div>\n    <div className=\"col-md-4 offset-md-1\">\n      <h2>Add a new article</h2>\n      <Form />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './js/store/index'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}